swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          type: 'string'
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          type: 'string'
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /transaction/currentMonth:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: 'Find all the transactions for the current month'
      description: 'Returns transactions of the current month'
      operationId: 'getTransactionsOfTheMonth'
      produces:
        - 'application/json'
      parameters: []
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/TransactionArrayResponse'
        '500':
          description: 'Internal Server Error'
  /transaction:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: 'Create a transaction'
      description: ''
      operationId: 'addTransaction'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'transaction to create'
          required: true
          schema:
            $ref: '#/definitions/TransactionUnknown'
      responses:
        '200':
          description: 'Transaction created successully'
          schema:
            $ref: '#/definitions/TransactionKnown'
        '400':
          description: 'Invalid Fields'
        '500':
          description: 'Internal Server Error'
  /transaction/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: 'Find transation by ID'
      description: 'Returns a single transaction'
      operationId: 'getTransactionById'
      produces:
        - 'application/json'
      parameters:
        - name: 'transactionId'
          in: 'path'
          description: 'ID of the transaction that needs to be fetched'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Transaction retrieved successully'
          schema:
            $ref: '#/definitions/TransactionKnown'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Order not found'
        '500':
          description: 'Internal Server Error'
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: 'Update a transaction'
      description: ''
      operationId: 'updateTransaction'
      produces:
        - 'application/json'
      parameters:
        - name: 'transactionId'
          in: 'path'
          description: 'ID of the transaction that needs to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'The updated transaction'
          required: true
          schema:
            $ref: '#/definitions/TransactionKnown'
      responses:
        '200':
          description: 'Transaction updated successully'
          schema:
            $ref: '#/definitions/TransactionKnown'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Transaction not found'
        '500':
          description: 'Internal Server Error'
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: 'Delete transaction by ID'
      description: ''
      operationId: 'deleteTransation'
      produces:
        - 'application/json'
      parameters:
        - name: 'transactionId'
          in: 'path'
          description: 'ID of the transaction that needs to be deleted'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Transaction deleted successully'
          schema:
            $ref: '#/definitions/TransactionIdResponse'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Transaction not found'
        '500':
          description: 'Internal Server Error'
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  TransactionUnknown:
    properties:
      date:
        type: string
        description: the date of the transaction
      accountType:
        type: string
        description: the type of account to be used (ex:Credit Card)
      description:
        type: string
        description: the transaction's description (ex:Golden Sun Bakery)
      amount:
        type: string
        description: the amount of the transaction in dollars
      transactionType:
        type: string
        description: the type of transaction (ex:Electronic)
      category:
        type: string
        description: the transaction's category (ex:Food)
      note:
        type: string
        description: note added to the transaction
  TransactionKnown:
    properties:
      id:
        type: string
        description: the transaction's id
      date:
        type: string
        description: the date of the transaction
      accountType:
        type: string
        description: the type of account to be used (ex:Credit Card)
      description:
        type: string
        description: the transaction's description (ex:Golden Sun Bakery)
      amount:
        type: string
        description: the amount of the transaction in dollars
      transactionType:
        type: string
        description: the type of transaction (ex:Electronic)
      category:
        type: string
        description: the transaction's category (ex:Food)
      note:
        type: string
        description: note added to the transaction
  TransactionArrayResponse:
    type: 'array'
    items:
      $ref: '#/definitions/TransactionKnown'
  TransactionIdResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
